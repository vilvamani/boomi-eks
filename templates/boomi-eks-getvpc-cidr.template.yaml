---
AWSTemplateFormatVersion: '2010-09-09'
Description: Get info from an Amazon VPC or subnet
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: VPC Identifier
Resources:
# LambdaExecutionRole - This role must have the IAM privileges to 
# call the necessary EC2 API calls.  These API calls currently do
# the following:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeSubnets
            - ec2:DescribeVpcs
            Resource: "*"

# NOTE: Pay special attention to the indentatiion in the Python code below.
# Lines that appear blank are likely not blank, but have leading spaces.
  GetVpcCidrStack:
    Type: AWS::Lambda::Function
    Properties: 
      Description: Look up info from a VPC or subnet ID 
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.6"
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          
          def handler(event, context):
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            # initialize our responses, assume failure by default
            
            response_data = {}
            response_status = cfnresponse.FAILED
            
            logger.info('Received event: {}'.format(json.dumps(event)))
            
            if event['RequestType'] == 'Delete':
              response_status = cfnresponse.SUCCESS
              cfnresponse.send(event, context, response_status, response_data)
            
            try:
              ec2=boto3.client('ec2')
            except Exception as e:
              logger.info('boto3.client failure: {}'.format(e))
              cfnresponse.send(event, context, response_status, response_data)
            
            name_filter = event['ResourceProperties']['NameFilter']
            name_filter_parts = name_filter.split('-')
            resource_type=name_filter_parts[0]
            
            if resource_type == "vpc":
              try:
                vpcs=ec2.describe_vpcs(VpcIds=[name_filter])
              except Exception as e:
                logger.info('ec2.describe_vpcs failure: {}'.format(e))
                cfnresponse.send(event, context, response_status, response_data)
              
              number_of_vpcs = len(vpcs['Vpcs'])
              logger.info('number of vpcs returned: {}'.format(number_of_vpcs))
              
              if number_of_vpcs == 1:
                CidrBlock = vpcs['Vpcs'][0]['CidrBlock']
                response_data['CidrBlock'] = CidrBlock
                logger.info('vpc CidrBlock {}'.format(CidrBlock))
                response_status = cfnresponse.SUCCESS
                cfnresponse.send(event, context, response_status, response_data)
              
              elif number_of_vpcs == 0:
                logger.info('no matching vpcs for filter {}'.format(name_filter))
                cfnresponse.send(event, context, response_status, response_data)
              
              else:
                logger.info('multiple matching vpcs for filter {}'.format(name_filter))
                cfnresponse.send(event, context, response_status, response_data)
              
            else:
              logger.info('invalid resource type {}'.resource_type)
              cfnresponse.send(event, context, response_status, response_data)

# VpcInfo - The AWS Lambda-backed resource for looking up an Amazon VPC
#
# Parameters
#
# ServiceToken - a pointer to the AWS Lambda function
# NameFilter - the VPC parameter which serves as a filter
  VpcInfo:
    Type: Custom::VpcInfo
    Properties:
      ServiceToken: !GetAtt GetVpcCidrStack.Arn
      NameFilter: !Ref VPCID
# Outputs - Display function output
Outputs:
  VPCCidrBlock:
    Description: VPC CidrBlock
    Value: !GetAtt VpcInfo.CidrBlock
