AWSTemplateFormatVersion: "2010-09-09"
Description: "Prepare an existing EKS cluster (qs-1p817r5f9)"
Metadata:
  LintSpellExclude: [Security Group, Subnet IDs]
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EKS cluster details
        Parameters:
          - KubeClusterName
          - K8sSubnetIds
          - ControlPlaneSecurityGroup
    ParameterLabels:
      KubeClusterName:
        default: EKS cluster name
      ControlPlaneSecurityGroup:
        default: EKS Security Group
      K8sSubnetIds:
        default: EKS Subnet IDs
Parameters:
  KubeClusterName:
    Type: String
    Description: Name of the EKS cluster to be enabled for CloudFormation use.
  K8sSubnetIds:
    Type: String
    Description: '[Optional] comma separated list of Subnet IDs associated with the EKS cluster. Must have routes to the Kubernetes, CloudFormation and EKS endpoints. Leave blank for publicly accessible clusters.'
    Default: ""
  ControlPlaneSecurityGroup:
    Type: String
    Default: ""
    Description: '[Optional] Security Group ID attached to the EKS cluster. Must have allow outbound access to the Kubernetes, CloudFormation and EKS endpoints. Leave blank for publicly accessible clusters.'
Conditions:
  EnableVpc: !Not [!Equals [!Ref K8sSubnetIds, '']]
Mappings:
  Config:
    Bucket:
      Bucket: 'aws-quickstart'
      Key: 'quickstart-amazon-eks/functions/packages/'
Resources:
  AwsCliLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Sub ['${P}-${AWS::Region}', {P: !FindInMap [Config, Bucket, Bucket]}]
        S3Key: !Sub ['${P}awscliLayer/lambda.zip', {P: !FindInMap [Config, Bucket, Key]}]
  KubectlLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Sub ['${P}-${AWS::Region}', {P: !FindInMap [Config, Bucket, Bucket]}]
        S3Key: !Sub ['${P}kubectlLayer/lambda.zip', {P: !FindInMap [Config, Bucket, Key]}]
  CrhelperLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Sub ['${P}-${AWS::Region}', {P: !FindInMap [Config, Bucket, Bucket]}]
        S3Key: !Sub ['${P}crhelperLayer/lambda.zip', {P: !FindInMap [Config, Bucket, Key]}]
  CreateVpcRoleLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt CreateVpcRoleRole.Arn
      Layers: [!Ref CrhelperLayer]
      Runtime: python3.7
      Timeout: 900
      Code:
        S3Bucket: !Sub ['${P}-${AWS::Region}', {P: !FindInMap [Config, Bucket, Bucket]}]
        S3Key: !Sub ['${P}createVpcRole/lambda.zip', {P: !FindInMap [Config, Bucket, Key]}]
  RegisterTypeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt RegisterTypeRole.Arn
      Layers: [!Ref CrhelperLayer]
      Runtime: python3.7
      Timeout: 900
      Code:
        S3Bucket: !Sub ['${P}-${AWS::Region}', {P: !FindInMap [Config, Bucket, Bucket]}]
        S3Key: !Sub ['${P}registerType/lambda.zip', {P: !FindInMap [Config, Bucket, Key]}]
  KubeManifestLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "EKS-QuickStart-KubeManifest-${KubeClusterName}"
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt KubernetesAdminRole.Arn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref KubectlLayer, !Ref CrhelperLayer, !Ref AwsCliLayer]
      Code:
        S3Bucket: !Sub ['${P}-${AWS::Region}', {P: !FindInMap [Config, Bucket, Bucket]}]
        S3Key: !Sub ['${P}KubeManifest/lambda.zip', {P: !FindInMap [Config, Bucket, Key]}]
      Environment: { Variables: { KUBECONFIG: /tmp/.kube/config } }
      VpcConfig: !If
        - EnableVpc
        - SecurityGroupIds: [!Ref ControlPlaneSecurityGroup]
          SubnetIds: !Split [",", !Ref K8sSubnetIds]
        - !Ref 'AWS::NoValue'
  KubeGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "EKS-QuickStart-KubeGet-${KubeClusterName}"
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt KubernetesAdminRole.Arn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref KubectlLayer, !Ref CrhelperLayer, !Ref AwsCliLayer]
      Code:
        S3Bucket: !Sub ['${P}-${AWS::Region}', {P: !FindInMap [Config, Bucket, Bucket]}]
        S3Key: !Sub ['${P}KubeGet/lambda.zip', {P: !FindInMap [Config, Bucket, Key]}]
      Environment: { Variables: { KUBECONFIG: /tmp/.kube/config } }
      VpcConfig: !If
      - EnableVpc
      - SecurityGroupIds: [!Ref ControlPlaneSecurityGroup]
        SubnetIds: !Split [",", !Ref K8sSubnetIds]
      - !Ref 'AWS::NoValue'

  # custom resources
  CreateVpcRole:
    Type: Custom::CreateVpcRole
    Properties:
      ServiceToken: !GetAtt CreateVpcRoleLambda.Arn
      Partition: !Ref "AWS::Partition"
  RegisterHelmType:
    Type: Custom::RegisterType
    Properties:
      ServiceToken: !GetAtt RegisterTypeFunction.Arn
      TypeName: "AWSQS::Kubernetes::Helm"
      Version: "2.0.0-beta1"
      SchemaHandlerPackage: !Sub
        - "s3://${BN}/${KP}"
        - BN: !Sub ['${P}-${AWS::Region}', {P: !FindInMap [Config, Bucket, Bucket]}]
          KP: !Sub ['${P}HelmReleaseResource/awsqs-kubernetes-helm.zip', {P: !FindInMap [Config, Bucket, Key]}]
      IamPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
              - "kms:Decrypt"
              - "eks:DescribeCluster"
              - "s3:GetObject"
              - "sts:AssumeRole"
              - "iam:PassRole"
              - "iam:ListRolePolicies"
              - "iam:ListAttachedRolePolicies"
              - "iam:GetRole"
              - "iam:GetPolicy"
              - "iam:GetPolicyVersion"
              - "ec2:CreateNetworkInterface"
              - "ec2:DeleteNetworkInterface"
              - "ec2:Describe*"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "lambda:*"
            Resource: "*"

  # IAM resources
  CreateVpcRoleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: create-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "iam:CreateRole"
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudFormation-Kubernetes-VPC'
              - Effect: Allow
                Action: "iam:AttachRolePolicy"
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/CloudFormation-Kubernetes-VPC'
                Condition:
                  ArnEquals:
                    "iam:PolicyARN":
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaENIManagementAccess'
                      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  KubernetesAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: eksStackPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - eks:*
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:  "*"
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource:  "*"
  RegisterTypeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                  - "iam:PassRole"
                  - "iam:CreateRole"
                  - "iam:CreatePolicy"
                  - "iam:ListPolicyVersions"
                  - "iam:DeletePolicyVersion"
                  - "iam:CreatePolicyVersion"
                  - "iam:AttachRolePolicy"
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                  - "sts:GetCallerIdentity"
                Resource: "*"

Outputs:
  EKSAdminRoleArn:
    Value: !GetAtt KubernetesAdminRole.Arn
  HelmRoleArn:
    Value: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-helm"
