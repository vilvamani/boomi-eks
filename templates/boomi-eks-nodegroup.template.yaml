AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys EKS nodes into an existing VPC (qs-1p7nknoid)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
          - NodeAMIOS
          - NodeInstanceProfile
          - NodeInstanceRoleName
          - NodeInstanceRoleArn
          - BootstrapArguments
          - HttpProxy
          - CustomAmiId
      - Label:
          default: EKS configuration
        Parameters:
          - EKSControlPlane
          - NodeInstanceType
          - NumberOfNodes
          - MaxNumberOfNodes
          - NodeGroupName
          - NodeVolumeSize
          - ManagedNodeGroup
          - MangedNodeGroupLabel
          - ManagedNodeGroupAMIType
          - ControlPlaneSecurityGroup
          - KubernetesVersion
          - TargetGroupARNs
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
          - NodeSGFunctionArn
    ParameterLabels:
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      KeyPairName:
        default: SSH key name
      NodeAMIOS:
        default: Node AMI operating system
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      EKSControlPlane:
        default: EKS cluster name
      NodeInstanceType:
        default: Nodes instance type
      NumberOfNodes:
        default: Number of nodes
      MaxNumberOfNodes:
        default: Maximum number of nodes
      NodeGroupName:
        default: Node group name
      NodeVolumeSize:
        default: Node volume size
      ManagedNodeGroup:
        default: Managed Node Group
      ManagedNodeGroupAMIType:
        default: Managed Node Group AMI type
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      BootstrapArguments:
        default: Bootstrap arguments
      ControlPlaneSecurityGroup:
        default: Control plane Security Group
      NodeInstanceProfile:
        default: Node instance profile
      NodeInstanceRoleName:
        default: Node instance role name
      NodeInstanceRoleArn:
        default: Node instance role ARN
      KubernetesVersion:
        default: Kubernetes version
      CustomAmiId:
        default: Custom AMI id
      HttpProxy:
        default: HTTP proxy
      TargetGroupARNs:
        default: Target Group ARN's
      MangedNodeGroupLabel:
        default: Managed node group label
      NodeSGFunctionArn:
        default: Node security group Lambda ARN
  AWSAMIRegionMap:
    Filters:
      AMZNEKS116:
        name: 'amazon-eks-node-1.16-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922', '877085696533', '590381155156']
      AMZNEKS116GPU:
        name: 'amazon-eks-gpu-node-1.16-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922', '877085696533', '590381155156']
      AMZNEKS115:
        name: 'amazon-eks-node-1.15-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922', '877085696533', '590381155156']
      AMZNEKS115GPU:
        name: 'amazon-eks-gpu-node-1.15-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922', '877085696533', '590381155156']
      AMZNEKS117:
        name: 'amazon-eks-node-1.17-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922', '877085696533', '590381155156']
      AMZNEKS117GPU:
        name: 'amazon-eks-gpu-node-1.17-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922', '877085696533', '590381155156']
      SLES15EKS115:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS115GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS116:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS116GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS117:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS117GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
  cfn-lint: { config: { ignore_checks: [W2030] } }
  LintSpellExclude:
    - Managed Node Group
    - files/bootstrap.sh
    - https://github.com/awslabs/amazon-eks-ami
    - autoscaler
    - Lambda
    - Security Group
    - Target Group
    - Kubernetes
    - Instance Profile
    - Role
    - Enabled
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  NodeAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
      - SUSE-SLES-15-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the node
      instances.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the workload (e.g.,
      subnet-a0246123)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the workload (e.g.,
      subnet-b1f432cd)
    Type: String
    Default: ""
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the workload (e.g.,
      subnet-b1f4a2cd)
    Type: String
    Default: ""
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances. We recommend
      that you set this value to a trusted IP range.
    Type: String
  NodeInstanceType:
    Default: t3.medium
    AllowedValues: [t3.nano,t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge, m5.large, m5.xlarge, m5.2xlarge
                    m5.4xlarge, m5.12xlarge, m5.24xlarge, c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge,
                    i3.large, i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge, i3.16xlarge, x1.16xlarge, x1.32xlarge, p3.2xlarge,
                    p3.8xlarge, p3.16xlarge, r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge, r5.24xlarge, r5d.large, 
                    r5d.xlarge, r5d.2xlarge, r5d.4xlarge, r5d.12xlarge, r5d.24xlarge, z1d.large, z1d.xlarge, z1d.2xlarge. 
                    z1d.3xlarge, z1d.6xlarge, z1d.12xlarge]
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the node instances
    Type: String
  NumberOfNodes:
    Default: 3
    Description: Number of EKS node instances
    Type: Number
  MaxNumberOfNodes:
    Default: ""
    Description: "[OPTIONAL] The maximum number of Amazon EKS node instances, if left blank will be set to the same value as NumberOfNodes"
    Type: String
  NodeGroupName:
    Default: Default
    Description: Name for EKS node group
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: Size for node volumes
    Type: String
  ManagedNodeGroup:
    AllowedValues: [ "yes", "no" ]
    Default: "no"
    Description: Choose if you want to use a managed node group. If you select "yes", you must select Kubernetes version 1.14 or higher.
    Type: String
  ManagedNodeGroupAMIType:
    Description: Select one of the two AMI types for your Managed Node Group (only applies if you selected Managed Node Group "yes". ).
      GPU instance types should use the AL2_x86_64_GPU AMI type, which uses the Amazon EKS-optimized Linux AMI with GPU support.
      Non-GPU instances should use the AL2_x86_64 AMI type, which uses the Amazon EKS-optimized Linux AMI.
    AllowedValues: [ "AL2_x86_64", " AL2_x86_64_GPU"]
    Default: "AL2_x86_64"
    Type: String
  MangedNodeGroupLabel:
    Description: Add a custom name label to the Managed Node Group nodes. If you dont do this then a default one will be added for you.
    Type: String
    Default: ''
  EKSControlPlane:
    Description: Name of the EKS cluster to join
    Type: String
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami.
    Type: String
    Default: ""
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: EKS control plane EC2 Security Group
  NodeInstanceProfile:
    Type: String
    Description: ARN for IAM Instance Profile to attach to nodes
  NodeInstanceRoleName:
    Type: String
    Description: IAM Role name to attach to nodes
  NodeInstanceRoleArn:
    Type: String
    Description: IAM Role ARN to attach to nodes
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.17", "1.16" ]
    Default: "1.17"
    Description: The Kubernetes control plane version.
  TargetGroupARNs:
    Type: CommaDelimitedList
    Default: ""
    Description: "[OPTIONAL] List of Target Group ARN's to use with Managed Node Groups"
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: quickstart-boomi-eks-molecule/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is
      hosted. When using your own bucket, you must specify this value.
    Type: String
  CustomAmiId:
    Type: String
    Default: ""
    Description: "[OPTIONAL] If an AMI id is specified here it will be used in stead of the ami determined from the OS/region."
  HttpProxy:
    Type: String
    Default: ""
    Description: "[OPTIONAL] Specify the host name for an HTTP proxy to use for outbound internet access."
  NodeSGFunctionArn:
    Type: String
    Description: Function ARN to fetch node Security Group for managed node groups
Conditions:
  EnableProxy: !Not [!Equals [!Ref HttpProxy, ""]]
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  2AZDeployment: !Or
    - !Not [!Equals [!Ref PrivateSubnet2ID, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  MaxNodes: !Not [ !Equals [ !Ref MaxNumberOfNodes, "" ] ]
  AmznOS: !Equals
    - !Ref NodeAMIOS
    - Amazon-Linux-HVM
  SuseOS: !Equals
    - !Ref NodeAMIOS
    - SUSE-SLES-15-HVM
  DisableTargetGroups: !Equals
    - !Join [",", !Ref 'TargetGroupARNs' ]
    - ""
  IsSingleInstance: !Equals
    - !Ref NumberOfNodes
    - 1
  UseCustomAmi: !Not [ !Equals [ !Ref CustomAmiId, "" ] ]
  CleanupSGs: !Equals [ !Ref 'ManagedNodeGroup', 'no' ]
  DisableManagedNodeGroup: !Equals [ !Ref 'ManagedNodeGroup' , 'no' ]
  EnableManagedNodeGroup: !Equals [ !Ref 'ManagedNodeGroup', 'yes' ]
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  GreaterThan114: !Not
    - !Or
      - !Equals [ !Ref 'KubernetesVersion', '1.14' ]
      - !Equals [ !Ref 'KubernetesVersion', '1.13' ]
  MNGLBL: !Equals [ !Ref 'MangedNodeGroupLabel', '' ]
Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }
  K8sVersionMap:
    "1.15":
      BinaryPath: 1.15.11/2020-08-04/bin/linux/amd64
      STD: EKS115
      GPU: EKS115GPU
    "1.16":
      BinaryPath: 1.16.13/2020-08-04/bin/linux/amd64
      STD: EKS116
      GPU: EKS116GPU
    "1.17":
      BinaryPath: 1.17.9/2020-08-04/bin/linux/amd64
      STD: EKS117
      GPU: EKS117GPU
  InstanceTypes:
    t3.nano: { Type: STD }
    t3.micro: { Type: STD }
    t3.small: { Type: STD }
    t3.medium: { Type: STD }
    t3.large: { Type: STD }
    t3.xlarge: { Type: STD }
    t3.2xlarge: { Type: STD }
    t3a.nano: { Type: STD }
    t3a.micro: { Type: STD }
    t3a.small: { Type: STD }
    t3a.medium: { Type: STD }
    t3a.large: { Type: STD }
    t3a.xlarge: { Type: STD }
    t3a.2xlarge: { Type: STD }
    m5.large: { Type: STD }
    m5.xlarge: { Type: STD }
    m5.2xlarge: { Type: STD }
    m5.4xlarge: { Type: STD }
    m5.12xlarge: { Type: STD }
    m5.24xlarge: { Type: STD }
    m5a.large: { Type: STD }
    m5a.xlarge: { Type: STD }
    m5a.2xlarge: { Type: STD }
    m5a.4xlarge: { Type: STD }
    m5a.12xlarge: { Type: STD }
    m5a.24xlarge: { Type: STD }
    c5.large: { Type: STD }
    c5.xlarge: { Type: STD }
    c5.2xlarge: { Type: STD }
    c5.4xlarge: { Type: STD }
    c5.9xlarge: { Type: STD }
    c5.18xlarge: { Type: STD }
    c5a.large: { Type: STD }
    c5a.xlarge: { Type: STD }
    c5a.2xlarge: { Type: STD }
    c5a.4xlarge: { Type: STD }
    c5a.12xlarge: { Type: STD }
    c5a.24xlarge: { Type: STD }
    i3.large: { Type: STD }
    i3.xlarge: { Type: STD }
    i3.2xlarge: { Type: STD }
    i3.4xlarge: { Type: STD }
    i3.8xlarge: { Type: STD }
    i3.16xlarge: { Type: STD }
    x1.16xlarge: { Type: STD }
    x1.32xlarge: { Type: STD }
    p3.2xlarge: { Type: GPU }
    p3.8xlarge: { Type: GPU }
    p3.16xlarge: { Type: GPU }
    r5.large: { Type: STD }
    r5.xlarge: { Type: STD }
    r5.2xlarge: { Type: STD }
    r5.4xlarge: { Type: STD }
    r5.12xlarge: { Type: STD }
    r5.24xlarge: { Type: STD }
    r5a.large: { Type: STD }
    r5a.xlarge: { Type: STD }
    r5a.2xlarge: { Type: STD }
    r5a.4xlarge: { Type: STD }
    r5a.12xlarge: { Type: STD }
    r5a.24xlarge: { Type: STD }
    r5d.large: { Type: STD }
    r5d.xlarge: { Type: STD }
    r5d.2xlarge: { Type: STD }
    r5d.4xlarge: { Type: STD }
    r5d.12xlarge: { Type: STD }
    r5d.24xlarge: { Type: STD }
    z1d.large: { Type: STD }
    z1d.xlarge: { Type: STD }
    z1d.2xlarge: { Type: STD }
    z1d.3xlarge: { Type: STD }
    z1d.6xlarge: { Type: STD }
    z1d.12xlarge: { Type: STD }
  OStoK8sVersionMap:
    Amazon-Linux-HVM:
      EKS117: AMZNEKS117
      EKS117GPU: AMZNEKS117GPU
      EKS115: AMZNEKS115
      EKS115GPU: AMZNEKS115GPU
      EKS116: AMZNEKS116
      EKS116GPU: AMZNEKS116GPU
    SUSE-SLES-15-HVM:
      EKS117: SLES15EKS117
      EKS117GPU: SLES15EKS117GPU
      EKS115: SLES15EKS115
      EKS115GPU: SLES15EKS115GPU
      EKS116: SLES15EKS116
      EKS116GPU: SLES15EKS116GPU
  AWSAMIRegionMap:
    ap-northeast-1:
      AMZNEKS116: ami-0b6f41e05739de6f7
      AMZNEKS116GPU: ami-0503df76723c99e5f
      AMZNEKS115: ami-05d5811f019627d23
      AMZNEKS115GPU: ami-0fb2fcc2ebea66788
      AMZNEKS117: ami-048669b0687eb3ad4
      AMZNEKS117GPU: ami-01abe1aa23729ddbc
      SLES15EKS115: ami-03a50deb52dc85f6f
      SLES15EKS115GPU: ami-03a50deb52dc85f6f
      SLES15EKS116: ami-03a50deb52dc85f6f
      SLES15EKS116GPU: ami-03a50deb52dc85f6f
      SLES15EKS117: ami-03a50deb52dc85f6f
      SLES15EKS117GPU: ami-03a50deb52dc85f6f
    ap-northeast-2:
      AMZNEKS116: ami-0c4fddcab827ce47e
      AMZNEKS116GPU: ami-0daffdcd3f9eb32f0
      AMZNEKS115: ami-0693d32b5c575531b
      AMZNEKS115GPU: ami-0297c509fe7d56135
      AMZNEKS117: ami-051a4e2ffdcf3ec03
      AMZNEKS117GPU: ami-0a1b3d8800cc10635
      SLES15EKS115: ami-04b0a659eb85132ef
      SLES15EKS115GPU: ami-04b0a659eb85132ef
      SLES15EKS116: ami-04b0a659eb85132ef
      SLES15EKS116GPU: ami-04b0a659eb85132ef
      SLES15EKS117: ami-04b0a659eb85132ef
      SLES15EKS117GPU: ami-04b0a659eb85132ef
    ap-south-1:
      AMZNEKS116: ami-05618375e5494e025
      AMZNEKS116GPU: ami-068a13ddd1751e7de
      AMZNEKS115: ami-0e8b410d739253a36
      AMZNEKS115GPU: ami-09835fe28827a0185
      AMZNEKS117: ami-0f23e10e68fbfad61
      AMZNEKS117GPU: ami-0538a0821fa5def9a
      SLES15EKS115: ami-026e9920feda96473
      SLES15EKS115GPU: ami-026e9920feda96473
      SLES15EKS116: ami-026e9920feda96473
      SLES15EKS116GPU: ami-026e9920feda96473
      SLES15EKS117: ami-026e9920feda96473
      SLES15EKS117GPU: ami-026e9920feda96473
    ap-southeast-1:
      AMZNEKS116: ami-08e29804ac624d84c
      AMZNEKS116GPU: ami-0c64ed9c1d97f4894
      AMZNEKS115: ami-0eeabedc8395abe2e
      AMZNEKS115GPU: ami-0572bbd844ee4dc36
      AMZNEKS117: ami-08468dfdc5c74b9b6
      AMZNEKS117GPU: ami-06230d459643620be
      SLES15EKS115: ami-01c272c9d95438039
      SLES15EKS115GPU: ami-01c272c9d95438039
      SLES15EKS116: ami-01c272c9d95438039
      SLES15EKS116GPU: ami-01c272c9d95438039
      SLES15EKS117: ami-01c272c9d95438039
      SLES15EKS117GPU: ami-01c272c9d95438039
    ap-southeast-2:
      AMZNEKS116: ami-011d40a39322ee07a
      AMZNEKS116GPU: ami-0cebfd00623aac2a3
      AMZNEKS115: ami-07f5c294575341e65
      AMZNEKS115GPU: ami-0bce3715ecf995cbc
      AMZNEKS117: ami-0e86ebda4a10a0c9b
      AMZNEKS117GPU: ami-0d55bdb0d924129a6
      SLES15EKS115: ami-0e729696b8705907b
      SLES15EKS115GPU: ami-0e729696b8705907b
      SLES15EKS116: ami-0e729696b8705907b
      SLES15EKS116GPU: ami-0e729696b8705907b
      SLES15EKS117: ami-0e729696b8705907b
      SLES15EKS117GPU: ami-0e729696b8705907b
    ca-central-1:
      AMZNEKS116: ami-0b5716c37f90ebd4d
      AMZNEKS116GPU: ami-0b627d9469ed72ca6
      AMZNEKS115: ami-0572f3b71cdaa6b3f
      AMZNEKS115GPU: ami-0e2679630c770c68b
      AMZNEKS117: ami-0a1c0fe138d36c907
      AMZNEKS117GPU: ami-003f7d1160c85495c
      SLES15EKS115: ami-01b8afc3676031bc7
      SLES15EKS115GPU: ami-01b8afc3676031bc7
      SLES15EKS116: ami-01b8afc3676031bc7
      SLES15EKS116GPU: ami-01b8afc3676031bc7
      SLES15EKS117: ami-01b8afc3676031bc7
      SLES15EKS117GPU: ami-01b8afc3676031bc7
    eu-central-1:
      AMZNEKS116: ami-00341e507eb458a09
      AMZNEKS116GPU: ami-063b62b734173cd87
      AMZNEKS115: ami-0503f8258d7df6001
      AMZNEKS115GPU: ami-0d5041a9735ca2789
      AMZNEKS117: ami-065ebfccbbb1c5734
      AMZNEKS117GPU: ami-0d14875522bcaa478
      SLES15EKS115: ami-0044ae6906d786f4b
      SLES15EKS115GPU: ami-0044ae6906d786f4b
      SLES15EKS116: ami-0044ae6906d786f4b
      SLES15EKS116GPU: ami-0044ae6906d786f4b
      SLES15EKS117: ami-0044ae6906d786f4b
      SLES15EKS117GPU: ami-0044ae6906d786f4b
    eu-north-1:
      AMZNEKS116: ami-08f8bd5d5365ef386
      AMZNEKS116GPU: ami-0b71dda06df994656
      AMZNEKS115: ami-0639d11d35fe64d2c
      AMZNEKS115GPU: ami-04fc4e52561e4c6c7
      AMZNEKS117: ami-03b82a6422a5fea81
      AMZNEKS117GPU: ami-09cf4bbfbae9eb09a
      SLES15EKS115: ami-07adafad3d1a31c72
      SLES15EKS115GPU: ami-07adafad3d1a31c72
      SLES15EKS116: ami-07adafad3d1a31c72
      SLES15EKS116GPU: ami-07adafad3d1a31c72
      SLES15EKS117: ami-07adafad3d1a31c72
      SLES15EKS117GPU: ami-07adafad3d1a31c72
    eu-west-1:
      AMZNEKS116: ami-0c62031215595b87a
      AMZNEKS116GPU: ami-09a7447e3c43872d4
      AMZNEKS115: ami-05560ab1b38de02bb
      AMZNEKS115GPU: ami-0ae5f0dfd13abd9bc
      AMZNEKS117: ami-0e88c067f159fff29
      AMZNEKS117GPU: ami-05f67d6c4a90acb96
      SLES15EKS115: ami-0ab507a86aac96b91
      SLES15EKS115GPU: ami-0ab507a86aac96b91
      SLES15EKS116: ami-0ab507a86aac96b91
      SLES15EKS116GPU: ami-0ab507a86aac96b91
      SLES15EKS117: ami-0ab507a86aac96b91
      SLES15EKS117GPU: ami-0ab507a86aac96b91
    eu-west-2:
      AMZNEKS116: ami-060c87ac45f6e8e1f
      AMZNEKS116GPU: ami-03897338e394beede
      AMZNEKS115: ami-0c715d71bded1c40e
      AMZNEKS115GPU: ami-0ad26c54062c16be2
      AMZNEKS117: ami-0a0e935731c835095
      AMZNEKS117GPU: ami-02da41dbb05fc1908
      SLES15EKS115: ami-092e26abbc42e948b
      SLES15EKS115GPU: ami-092e26abbc42e948b
      SLES15EKS116: ami-092e26abbc42e948b
      SLES15EKS116GPU: ami-092e26abbc42e948b
      SLES15EKS117: ami-092e26abbc42e948b
      SLES15EKS117GPU: ami-092e26abbc42e948b
    eu-west-3:
      AMZNEKS116: ami-08d3272747bd24ad7
      AMZNEKS116GPU: ami-0f8e41f304720bb77
      AMZNEKS115: ami-092783c696a6db223
      AMZNEKS115GPU: ami-03b0e51270ccad27e
      AMZNEKS117: ami-08ace09f7833fbcd4
      AMZNEKS117GPU: ami-01ea22d25b2fb7f75
      SLES15EKS115: ami-02752a8e80a726bf0
      SLES15EKS115GPU: ami-02752a8e80a726bf0
      SLES15EKS116: ami-02752a8e80a726bf0
      SLES15EKS116GPU: ami-02752a8e80a726bf0
      SLES15EKS117: ami-02752a8e80a726bf0
      SLES15EKS117GPU: ami-02752a8e80a726bf0
    sa-east-1:
      AMZNEKS116: ami-01f36e4946e9683aa
      AMZNEKS116GPU: ami-07f9783a0257a438f
      AMZNEKS115: ami-06488a769fa5f75c8
      AMZNEKS115GPU: ami-0cb8238448799101d
      AMZNEKS117: ami-057a7809330139961
      AMZNEKS117GPU: ami-096e3bc15eb88796a
      SLES15EKS115: ami-03f86014a2e5c11fd
      SLES15EKS115GPU: ami-03f86014a2e5c11fd
      SLES15EKS116: ami-03f86014a2e5c11fd
      SLES15EKS116GPU: ami-03f86014a2e5c11fd
      SLES15EKS117: ami-03f86014a2e5c11fd
      SLES15EKS117GPU: ami-03f86014a2e5c11fd
    us-east-1:
      AMZNEKS116: ami-04e4992e477024f96
      AMZNEKS116GPU: ami-0cea991c2c343d5da
      AMZNEKS115: ami-02bab75c1a52eba68
      AMZNEKS115GPU: ami-065c27623c6d7487f
      AMZNEKS117: ami-0925e0a4a64fb6895
      AMZNEKS117GPU: ami-02e9f477367b0702e
      SLES15EKS115: ami-0e0fcf63653340b66
      SLES15EKS115GPU: ami-0e0fcf63653340b66
      SLES15EKS116: ami-0e0fcf63653340b66
      SLES15EKS116GPU: ami-0e0fcf63653340b66
      SLES15EKS117: ami-0e0fcf63653340b66
      SLES15EKS117GPU: ami-0e0fcf63653340b66
    us-east-2:
      AMZNEKS116: ami-0fbc7e56fb99f5337
      AMZNEKS116GPU: ami-02e108cd68d254af3
      AMZNEKS115: ami-0d38d43582b0a32bf
      AMZNEKS115GPU: ami-07ec0dd544be09fb9
      AMZNEKS117: ami-072868043b527ff26
      AMZNEKS117GPU: ami-0dec6dbc0bc92c320
      SLES15EKS115: ami-054462c52d9c225ce
      SLES15EKS115GPU: ami-054462c52d9c225ce
      SLES15EKS116: ami-054462c52d9c225ce
      SLES15EKS116GPU: ami-054462c52d9c225ce
      SLES15EKS117: ami-054462c52d9c225ce
      SLES15EKS117GPU: ami-054462c52d9c225ce
    us-west-2:
      AMZNEKS116: ami-0412dd0339679edc9
      AMZNEKS116GPU: ami-0d5a3b3661cf8e969
      AMZNEKS115: ami-056b54ee08fc2e5d1
      AMZNEKS115GPU: ami-0387e5911829c8db4
      AMZNEKS117: ami-01c3b376c82d7673d
      AMZNEKS117GPU: ami-03a8d909816d17ee9
      SLES15EKS115: ami-0d218397f35e41108
      SLES15EKS115GPU: ami-0d218397f35e41108
      SLES15EKS116: ami-0d218397f35e41108
      SLES15EKS116GPU: ami-0d218397f35e41108
      SLES15EKS117: ami-0d218397f35e41108
      SLES15EKS117GPU: ami-0d218397f35e41108
    me-south-1:
      AMZNEKS116: ami-0080a7be6ffe76791
      AMZNEKS116GPU: ami-0c79734ffd650f311
      AMZNEKS115: ami-0f7602db7a6b89cb2
      AMZNEKS115GPU: ami-096ecef5bf7e650c3
      AMZNEKS117: ami-0c18449eb960939bb
      AMZNEKS117GPU: ami-0b4ba8b97b3d26d5c
      SLES15EKS115: ami-01dd80fcffd8fee08
      SLES15EKS115GPU: ami-01dd80fcffd8fee08
      SLES15EKS116: ami-01dd80fcffd8fee08
      SLES15EKS116GPU: ami-01dd80fcffd8fee08
      SLES15EKS117: ami-01dd80fcffd8fee08
      SLES15EKS117GPU: ami-01dd80fcffd8fee08
    ap-east-1:
      AMZNEKS116: ami-054ab980feb464a27
      AMZNEKS116GPU: ami-0d8ae48d38aa6b828
      AMZNEKS115: ami-034382e3d11643778
      AMZNEKS115GPU: ami-03b83a1d4c03acbf1
      AMZNEKS117: ami-0640011b3ac49d33f
      AMZNEKS117GPU: ami-0559b50941175444b
      SLES15EKS115: ami-0f531e80da9c83538
      SLES15EKS115GPU: ami-0f531e80da9c83538
      SLES15EKS116: ami-0f531e80da9c83538
      SLES15EKS116GPU: ami-0f531e80da9c83538
      SLES15EKS117: ami-0f531e80da9c83538
      SLES15EKS117GPU: ami-0f531e80da9c83538
    eu-south-1:
      AMZNEKS116: ami-0a7dab74109ffc60e
      AMZNEKS116GPU: ami-05c24691f0d47980c
      AMZNEKS115: ami-0ef9a055d02891de6
      AMZNEKS115GPU: ami-0f81db845d6ae473c
      AMZNEKS117: ami-090d32cb702e21337
      AMZNEKS117GPU: ami-0ba4c1f6187438c65
      SLES15EKS115: ami-0d0f5ffcc52bc11e6
      SLES15EKS115GPU: ami-0d0f5ffcc52bc11e6
      SLES15EKS116: ami-0d0f5ffcc52bc11e6
      SLES15EKS116GPU: ami-0d0f5ffcc52bc11e6
      SLES15EKS117: ami-0d0f5ffcc52bc11e6
      SLES15EKS117GPU: ami-0d0f5ffcc52bc11e6
    af-south-1:
      AMZNEKS116: ami-074166677c8aa1d39
      AMZNEKS116GPU: ami-09b848d1965bcac64
      AMZNEKS115: ami-0578b807b719cabdd
      AMZNEKS115GPU: ami-01e400dbc00003039
      AMZNEKS117: ami-0f9cc438e5b3bf53e
      AMZNEKS117GPU: ami-00fa48e5cb996201e
      SLES15EKS115: ami-0b137524762f71c4c
      SLES15EKS115GPU: ami-0b137524762f71c4c
      SLES15EKS116: ami-0b137524762f71c4c
      SLES15EKS116GPU: ami-0b137524762f71c4c
      SLES15EKS117: ami-0b137524762f71c4c
      SLES15EKS117GPU: ami-0b137524762f71c4c
    cn-north-1:
      AMZNEKS116: ami-003f8f06e8b82f94b
      AMZNEKS116GPU: ami-0b54cb3e354554bb5
      AMZNEKS115: ami-05e0d3314085a3128
      AMZNEKS115GPU: ami-0a66314a65b3b6c42
      AMZNEKS117: ami-0526894a6aa0738d1
      AMZNEKS117GPU: ami-0db22cbd99168d507
      SLES15EKS115: ami-0a679f1f91f1126c9
      SLES15EKS115GPU: ami-0a679f1f91f1126c9
      SLES15EKS116: ami-0a679f1f91f1126c9
      SLES15EKS116GPU: ami-0a679f1f91f1126c9
      SLES15EKS117: ami-0a679f1f91f1126c9
      SLES15EKS117GPU: ami-0a679f1f91f1126c9
    cn-northwest-1:
      AMZNEKS116: ami-031c837bbc78f55eb
      AMZNEKS116GPU: ami-03dab94a952a98707
      AMZNEKS115: ami-05b037b10bdb553b0
      AMZNEKS115GPU: ami-01a448e7a0714afca
      AMZNEKS117: ami-0d782e954096a8a9c
      AMZNEKS117GPU: ami-0f3ea17fd8bb65849
      SLES15EKS115: ami-0e8c0a5deaf823a88
      SLES15EKS115GPU: ami-0e8c0a5deaf823a88
      SLES15EKS116: ami-0e8c0a5deaf823a88
      SLES15EKS116GPU: ami-0e8c0a5deaf823a88
      SLES15EKS117: ami-0e8c0a5deaf823a88
      SLES15EKS117GPU: ami-0e8c0a5deaf823a88
Resources:
  CleanupSecurityGroupDependencies:
    Condition: CleanupSGs
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-CleanupSecurityGroupDependencies', {Prefix: !FindInMap [Config, Prefix, Value]}]
      SecurityGroups:
        - !If
          - DisableManagedNodeGroup
          - !Ref NodeSecurityGroup
          - !Ref 'AWS::NoValue'
  NodeSecurityGroup:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the node group
      VpcId: !Ref VPCID
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${EKSControlPlane}"
          Value: 'owned'
  NodeSecurityGroupIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  ManagedNodeSecurityGroupIngress:
    Metadata:
      cfn-lint: { config: { ignore_checks: [E3008] } }
    Condition: EnableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSG
      SourceSecurityGroupId: !Ref NodeSG
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ClusterControlPlaneSecurityGroupIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  SSHIntoNodeGroup:
    Condition: EnableManagedNodeGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the node group
      VpcId: !Ref VPCID
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${EKSControlPlane}"
          Value: 'owned'
  NodeSG:
    Condition: EnableManagedNodeGroup
    Type: Custom::NodeSG
    Properties:
      ServiceToken: !Ref NodeSGFunctionArn
      ClusterName: !Ref EKSControlPlane
      NodeGroupName: !GetAtt EKSNodegroup.NodegroupName
  NodeSGIngress:
    Condition: EnableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSG
      CidrIp: !Ref VPCCIDR
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeGroup:
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
      DependsOn2: !If [ EnableProxy, !Ref ConfigureProxy, !Ref "AWS::NoValue" ]
    Condition: DisableManagedNodeGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumberOfNodes
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NumberOfNodes
      MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      VPCZoneIdentifier: !If
        - 3AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
        - !If
          - 2AZDeployment
          - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
          - [ !Ref PrivateSubnet1ID ]
      TargetGroupARNs: !If [ DisableTargetGroups, !Ref "AWS::NoValue", !Ref TargetGroupARNs ]
      Tags:
        - Key: Name
          Value: !Sub "${EKSControlPlane}-${NodeGroupName}-Node"
          PropagateAtLaunch: true
        - Key: !Sub 'kubernetes.io/cluster/${EKSControlPlane}'
          Value: 'owned'
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: 'true'
          PropagateAtLaunch: true
        - Key: !Sub 'k8s.io/cluster-autoscaler/${EKSControlPlane}'
          Value: ''
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NumberOfNodes
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !If [IsSingleInstance, 0, 1]
        MaxBatchSize: 1
        WaitOnResourceSignals : true
        PauseTime: PT15M
  ConfigureProxy:
    Condition: EnableProxy
    Type: "Custom::EnableProxy"
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${EKSControlPlane}'
      HttpProxy: !Ref HttpProxy
      VpcId: !Ref VPCID
      ClusterName: !Ref EKSControlPlane
  NodeLaunchConfig:
    Condition: DisableManagedNodeGroup
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Auth:
          buckets:
            - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          roleName: !Ref NodeInstanceRoleName
          type: S3
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/worker/bootstrap.sh:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/bootstrap.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/docker-daemon.json:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/docker-daemon.json'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/eni-max-pods.txt:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/eni-max-pods.txt'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/install-worker.sh:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/install-worker.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000755'
              authentication: S3Auth
            /tmp/worker/kubelet-config.json:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-config.json'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet-kubeconfig:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-kubeconfig'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet.service:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet.service${Version}'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                  Version: !If [GreaterThan114, ".1.15", ""]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/logrotate-kube-proxy:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/logrotate-kube-proxy'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
          commands:
            a-install:
              command: /tmp/worker/install-worker.sh
              env:
                BINARY_BUCKET_NAME: amazon-eks
                BINARY_BUCKET_PATH: !FindInMap
                  - K8sVersionMap
                  - !Ref KubernetesVersion
                  - BinaryPath
                BINARY_BUCKET_REGION: us-west-2
            b-bootstrap:
              command: !Sub /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments}
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !If
        - UseCustomAmi
        - !Ref CustomAmiId
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - !FindInMap
            - OStoK8sVersionMap
            - !Ref NodeAMIOS
            - !FindInMap
              - K8sVersionMap
              - !Ref KubernetesVersion
              - !FindInMap
                - InstanceTypes
                - !Ref NodeInstanceType
                - Type
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: !If [ SuseOS, /dev/sda1, /dev/xvda ]
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            set -o xtrace
            function signal() {
              $1/cfn-signal --exit-code $2 \
                --stack  ${AWS::StackName} \
                --resource NodeGroup  \
                --region ${AWS::Region}
            }
            ${ProxySetup}
            ${BootStrap}
            ${ProxyPostSetup}
            ${Signal}
          - ProxySetup: !If
              - EnableProxy
              - !Sub |
                  MAC=$(curl -s http://169.254.169.254/latest/meta-data/mac/)
                  VPCCIDR=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/vpc-ipv4-cidr-blocks | xargs | tr ' ' ',')
                  cat <<EOF >> /etc/environment
                  HTTP_PROXY=${HttpProxy}
                  HTTPS_PROXY=${HttpProxy}
                  http_proxy=${HttpProxy}
                  https_proxy=${HttpProxy}
                  no_proxy=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  NO_PROXY=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  EOF
                  set -a
                  source /etc/environment
              - ""
            ProxyPostSetup: !If
              - EnableProxy
              - |
                  mkdir -p /etc/systemd/system/docker.service.d
                  cat <<EOF >> /etc/systemd/system/docker.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  cat <<EOF >> /etc/systemd/system/kubelet.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  systemctl daemon-reload
                  systemctl enable --now --no-block docker
                  systemctl restart docker
                  systemctl restart kubelet
              - ""
            Signal: !If
              - AmznOS
              - |
                  signal /opt/aws/bin $?
              - |
                  signal /usr/bin $?
                  if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                    # Need to enable some kernel boot options and reboot
                    sed -i 's|GRUB_CMDLINE_LINUX=""|GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1" |' /etc/default/grub
                    grub2-mkconfig -o /boot/grub2/grub.cfg
                    reboot
                  fi
            BootStrap: !If
            - AmznOS
            - !Sub |
                /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments} || signal /opt/aws/bin $1
            - !Sub |
                if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                  zypper in -y python2-setuptools
                  update-alternatives --set easy_install /usr/bin/easy_install-2.7
                fi
                easy_install https://cloudformation-examples.s3.amazonaws.com/aws-cfn-bootstrap-latest.zip
                /usr/bin/cfn-init \
                  --stack ${AWS::StackName} \
                  --resource NodeLaunchConfig \
                  --region ${AWS::Region}
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
    Condition: EnableManagedNodeGroup
    Properties:
      ClusterName: !Ref EKSControlPlane
      NodeRole: !Ref NodeInstanceRoleArn
      AmiType: !If [ EnableManagedNodeGroup, !Ref 'ManagedNodeGroupAMIType', !Ref "AWS::NoValue" ]
      InstanceTypes:
        - !Ref 'NodeInstanceType'
      DiskSize: !Ref NodeVolumeSize
      ScalingConfig:
        MinSize: !Ref NumberOfNodes
        DesiredSize: !Ref NumberOfNodes
        MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      Labels:
        Key: Name
        Value: !If [ MNGLBL, !Sub '${EKSControlPlane}-${NodeGroupName}-Node', !Ref MangedNodeGroupLabel ]
        PropagateAtLaunch: true
      NodegroupName: !If [ MNGLBL, !Sub '${EKSControlPlane}-${NodeGroupName}-Node', !Ref MangedNodeGroupLabel ]
      Subnets: !If
      - 3AZDeployment
      - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
      - !If
        - 2AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
        - [ !Ref PrivateSubnet1ID ]
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
        SourceSecurityGroups: 
          - !Ref SSHIntoNodeGroup
Outputs:
  EKSNodeSecurityGroup:
    Value: !If
      - DisableManagedNodeGroup
      - !Ref NodeSecurityGroup
      - !If [ EnableManagedNodeGroup, !Ref NodeSG, "" ]
  NodeAutoScalingGroup:
    Value: !If
      - DisableManagedNodeGroup
      - !Ref 'NodeGroup'
      - !If [ EnableManagedNodeGroup, !Ref 'EKSNodegroup', "" ]
